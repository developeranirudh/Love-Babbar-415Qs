class Solution{

    // Function to find the trapped water between the blocks.
    public:
    /////////////////////////////////////////////////
    int trappingWater(int arr[], int n){
        // Code here
        int i,r[n],l[n];
       int  max=arr[0];
        for(i=0;i<n;i++)
        {
            if(arr[i]>max)
            {
                max=arr[i];
                r[i]=max;
            }
            else
            {
                r[i]=max;
        }
    }
    int max1=arr[n-1];
        for(i=n-1;i>=0;i--)
        {
            if(arr[i]>max1)
            {
                max1=arr[i];
                l[i]=max1;
            }
            else
            {
                l[i]=max1;
        }
    }
    int sum=0;
    for(i=0;i<n;i++)
    {
       if(l[i]>r[i])
       {
           sum+=(r[i]-arr[i]);
       }
       else
       {
           sum+=(l[i]-arr[i]);
       }
    }
   return sum;
}
};
////////////////////////////////
// { Driver Code Starts.

int main(){
    
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        
        int a[n];
        
        //adding elements to the array
        for(int i =0;i<n;i++){
            cin >> a[i];            
        }
        Solution obj;
        //calling trappingWater() function
        cout << obj.trappingWater(a, n) << endl;
        
    }
    
    return 0;
}  // } Driver Code Ends
